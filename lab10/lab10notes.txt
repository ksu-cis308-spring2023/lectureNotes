Project 3 - can be turned in tonight for 10% penalty

one more project in this class
    - will be posted tomorrow or Monday


//////////////////////////////

User-defined types:

1) structs
2) typedef
3) enum
4) union

//////////////////////////////

Enum - like enum in C#


enum name {val1, val2, ...};

    //Or:     enum name {val1, val2, ...} optionalObjList; 




Examples:

    enum medals {gold, silver, bronze};
    enum medals track = gold;

    typedef enum {red, green, blue} COLOR;
    COLOR house = red;



And can use enum values in an if-statement:

if (house == red) {
    //do something
}

//////////////////////


How enums are stored.

- creates integer constants for each value (starting at 0)


If I have:

    typedef enum {red, green, blue} COLOR;
    COLOR book_color = red;


Last line is equivalent to:

    COLOR book_color = 0;

Can use the enum values and the ints interchangeably (but please don't...)

////////////////////////

If we have:

    typedef enum {red, green, blue} COLOR;

Can we do?

    typedef enum {red, pink, yellow} APPLE_COLORS;


NO! Can't use same enum value (like red) in two different enums

///////////////////////

WILL let you do something like:

    typedef enum {one, two, three} NUMS;

    typedef enum {first, second, third} NUMS2;

    NUMS n = one;
    n = second; //really just setting n to 1

    if (n == two) {
        //would be true

    }

////////////////////////

Specifying enum int values:

typedef enum {freshman = 9, sophomore, junior, senior} YEAR;


////////////////////////

How could we use enum to create a BOOL type?

typedef enum {false, true} BOOL;

BOOL flag = false;



///////////////////////

Printing enum - can print as an int, %d

Would need an if/switch to look at value and manually print text



typedef enum {red, green, blue} COLOR;
COLOR ex = red;

printf("%d\n", ex); //prints 0



//how to print ex?
//if-statement for all values, print text yourself
if (ex == red) {
    printf("red");
}

///////////////////////

Unions 

- a construct that can hold one of several types
- definition looks like a struct, but only ONE type is stored at a time


Syntax:

union name {
    type1 name1;
    type2 name2;
    ...
} optionalObjList;


When we create a union, we can store ONE of its fields.

The sizeof a union is the size of its biggest field --
    all fields occupy the same spot in memory

////////////////////

Example:

typedef union {
    double dollars;
    int yen;
} MONEY;

MONEY m;
m.dollars = 4.20;

--> can print m.dollars now as a %lf
--> m.yen as %d will be corrupted



If we then do:

m.yen = 17;

--> can print m.yen now as %d
--> m.dollars will be corrupted (sometimes...old information
        might still be there if new value isn't taking up
        as much of the space)


--> there is no way to tell which field is set -- you need to keep track

--> most common approach: use a corresponding enum


//////////////////////////


Combining user-defined types.

Make a PERSON struct.

All people have a name and an age
A person can be either: union
    - a student (with a GPA and a major)
    - an employee (with a division and a years worked)
Also want to keep track of whether person is student or employee

//write the type here


typedef struct {
    char name[50];
    int age;
    union {
        struct {
            double gpa;
            char major[50];
        } studentInfo;
        struct {
            char div[50];
            int years;
        } empInfo;s
    } personStored;
    enum {studentType, empType} storedType;
} PERSON;


Bob Jones, age 20
student
ECE, 3.2

//how do I make a new PERSON for Bob?

PERSON* pers = malloc(sizeof(PERSON));
pers->age = 20;
strcpy(pers->name, "Bob");
pers->personStored.studentInfo.gpa = 3.2;
strcpy(pers->personStored.studentInfo.major, "ECE");
pers->storedType = studentType;




--> how do I print p's information?

if (p->personType == studentType) {
    //print all the stuff for a student

}


///////////////////////

Look at Lab 10.

pet.h, pet.c, lab10.C

- define a struct representing a pet that can be either a cat or dog


- complete these functions:

PET* init_cat(char* n, CAT_HAIR h, CAT_ENV en);

PET* init_dog(char* n, char* b, BOOL pure);

void print_pet(PET* p);


- in main (lab10.c), create 4 PET* and store them in an array.

//////////////////////////

make clean had issues on lab machines

    --> labs don't recognize rm *.o *.exe

If you have errors with make clean, change it to be:

clean:
    del *.o *.exe

